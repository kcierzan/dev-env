---
- hosts: localhost
  vars_prompt:
    - name: wifi_ssid
      prompt: Enter your wifi SSID
      private: no
      default: ""

    - name: wifi_password
      prompt: Enter your wifi password
      private: no
      default: ""
  vars:
    dotfiles_dir: "{{ ansible_env.HOME }}/.dotfiles"
    src_dir: "{{ ansible_env.HOME }}/src"
    new_user: ""
    new_password: ""
    macos_dotfiles:
      - aerospace
    linux_dotfiles:
      - hyprland
      - waybar
      - wireplumber
    common_dotfiles:
      - alacritty
      - bin
      - borders
      - fish
      - git
      - jetbrains
      - lsd
      - nvim
      - starship
      - zellij
    homebrew_casks:
      - 1password
      - aerospace
      - alacritty
      - betterdisplay
      - chromedriver
      - docker
      - figma
      - httpie
      - hyperkey
      - jetbrains-toolbox
      - obsidian
      - raycast
      - scroll-reverser
      - zed
    homebrew_packages:
      - bat
      - bottom
      - boxes
      - coreutils
      - direnv
      - felixkratz/formulae/borders
      - figlet
      - findutils
      - fish
      - fortune
      - fzf
      - gawk
      - gcc
      - gh
      - git-delta
      - gnu-sed
      - gnu-tar
      - gnu-which
      - go
      - grep
      - gzip
      - htop
      - jq
      - lazygit
      - lsd
      - luarocks
      - magic-wormhole
      - make
      - mise
      - mosh
      - neovim
      - openssh
      - pnpm
      - postgresql@15
      - prettier
      - rbenv
      - ripgrep
      - rust
      - shellcheck
      - starship
      - stow
      - supabase/tap/supabase
      - wget
      - xplr
      - zellij
      - zoxid
    arch_packages:
      - 1password
      - alacritty
      - amd-ucode # TODO: check that the processor is AMD before installing
      - base
      - base-devel
      - bat
      - bind
      - blueman
      - bluez
      - bluez-utils
      - bottom
      - brightnessctl
      - copyq
      - ddcci-driver-linux-dkms
      - direnv
      - docker
      - docker-compose
      - dosfstools
      - efibootmgr
      - fd
      - firefox-developer-edition
      - fish
      - font-manager
      - fzf
      - gammastep-git
      - git
      - gnome-keyring
      - google-chrome
      - grub
      - htop
      - hyprcursor-git
      - hyprland-git
      - hyprlang-git
      - hyprwayland-scanner-git
      - inotify-tools
      - jellyfin-ffmpeg5-bin
      - jq
      - lazygit
      - libgnome-keyring
      - libva-mesa-driver
      - libva-utils
      - linux
      - linux-firmware
      - linux-headers
      - lsd
      - lvm2
      - magic-wormhole
      - mako
      - mise-bin
      - mpv
      - neofetch
      - neovim-git
      - networkmanager
      - os-prober
      - paru
      - pipewire-pulse
      - plocate
      - pnpm
      - postgresql
      - qt5-wayland
      - qt6-wayland
      - reflector
      - ripgrep
      - snapd
      - spdlog-git
      - starship
      - stow
      - supabase-git
      - swayidle
      - swww-git
      - sxiv-git
      - ttf-joypixels
      - unzip
      - vulkan-radeon # TODO: check if the GPU is AMD before installing
      - waybar-git
      - wev-git
      - wget
      - wl-clipboard
      - wlr-randr-git
      - wofi
      - zellij
      - zoxide
    root_systemd_services:
      - bluetooth
      - NetworkManager
      - docker
      - snapd.socket
      - snapd.apparmor
    user_systemd_services:
      - gnome-keyring-daemon
      - pipewire
      - pipewire-pulse
      - wireplumber
      - xdg-desktop-portal
      - mako
    mise_runtimes:
      - python@3.12.2
      - ruby@3.2.3
      - node@20.4.0
      - erlang@26.0.2
      - elixir@1.15.2-otp-26
      - bun@1.1.4

  tasks:
    - name: Running tasks for macOS
      when: ansible_os_family == "Darwin"
      block:
        - name: Updating macOS
          shell: "softwareupdate --install --all"

        - name: Install homebrew
          include_role:
            name: geerlingguy.mac.homebrew

        - name: Make sure homebrew is in path
          ansible.builtin.lineinfile:
            path: /etc/paths
            state: present
            line: '/opt/homebrew/bin'
          become: true
          become_user: root

        - name: Add custom homebrew repos
          community.general.homebrew_tap:
            name: [
              felixkratz/formulae,
              heroku/brew,
              homebrew/bundle,
              homebrew/cask-fonts,
              homebrew/cask-versions,
              homebrew/services,
              nikitabobko/tap,
              supabase/tap,
            ]

        - name: Install homebrew casks
          community.general.homebrew_cask:
            name: "{{ item }}"
          ignore_errors: yes
          with_items: "{{ homebrew_casks }}"

        - name: Install homebrew packages
          community.general.homebrew:
            name: "{{ homebrew_packages }}"

        - name: Installing httpie CLI
          community.general.homebrew:
            name: httpie
            state: present
          failed_when: "result.msg is defined and 'Treating httpie as a formula' not in result.msg"
          register: result

    - name: Running tasks for Arch Linux
      when: ansible_facts['distribution'] == 'Archlinux'
      block:
        - name: Install base-devel and git
          pacman:
            name:
              - base-devel
              - git
            state: present

        - name: Check if paru is already installed
          shell: command -v paru
          register: paru_installed
          ignore_errors: yes

        - name: Clone paru
          git:
            repo: 'https://aur.archlinux.org/paru.git'
            dest: "{{ src_dir }}/paru"
            update: yes
            version: master
          when: paru_installed.rc != 0

        - name: Build and install paru
          shell: makepkg -si --noconfirm
          args:
            chdir: "{{ src_dir }}/paru"
          when: paru_installed.rc != 0

        - name: Check installed packages
          command: paru -Q
          register: installed_packages

        - name: Set fact for packages to install
          set_fact:
            packages_to_install: "{{ arch_packages | difference(installed_packages.stdout_lines | map('regex_replace', '^([^ ]+).*$', '\\1') | list) }}"

        - name: Install packages with paru
          command: paru -S --noconfirm {{ packages_to_install | join(' ') }}
          when: packages_to_install | length > 0

        - name: Set up NetworkManager WiFi
          when: wifi_ssid != "" and wifi_password != ""
          template:
            src: templates/network_manager_wifi_connection.j2
            dest: "/etc/NetworkManager/system-connections/{{ wifi_ssid | replace(' ', '_') }}.nmconnection"
            owner: root
            group: root
            mode: '0600'
          notify:
            - reload network manager

        - name: Ensure root systemd services are running
          systemd:
            name: "{{ item }}"
            state: started
            enabled: yes
          loop: "{{ root_systemd_services }}"
          become: yes

        - name: Ensure user systemd services are running
          systemd:
            name: "{{ item }}"
            state: started
            enabled: yes
            scope: user
          loop: "{{ user_systemd_services }}"

        - name: Install webstorm
          community.general.snap:
            name: webstorm
            classic: yes
            channel: latest/stable

    # Start generic tasks
    - name: Get fish path
      become: false
      local_action: command which fish
      register: fish_path

    - name: Get the user's login shell
      getent:
        database: passwd
        key: "{{ ansible_user_id }}"

    - name: Check if the user's shell is fish
      set_fact:
        fish_is_login_shell: "{{ getent_passwd[ansible_user_id][5] == fish_path }}"
      when: getent_passwd[ansible_user_id] is defined

    - name: Add fish to shells
      lineinfile:
        path: /etc/shells
        line: "{{ fish_path.stdout }}"
      become: true

    - name: Set the login shell to fish
      shell: "chsh -s $(which fish) {{ ansible_env.USER }}"
      when: not fish_is_login_shell
      become: true

    - name: Set fish global variables
      shell:
        cmd: "fish -c 'set -Ux {{ item.name }} {{ item.value }}'"
      loop:
        - { name: 'BAT_THEME', value: 'base16' }
        - { name: 'EDITOR', value: "'nvim'" }
        - { name: 'VISUAL', value: "'nvim'" }
        - { name: 'STARSHIP_CONFIG', value: '"$HOME/.config/starship/starship.toml"' }
        - { name: 'LANG', value: 'en_US.UTF-8' }
        - { name: 'FZF_PREVIEW_COMMAND', value: 'bat --style=numbers --color=always {}' }
        - { name: 'FZF_COMPLETION_TRIGGER', value: "'**'" }
        - { name: 'FZF_DEFAULT_OPTS', value: "'--color=fg:-1,bg:-1,fg+:4,bg+:-1,header:3,hl:-1,hl+:3,prompt:4,spinner:5,pointer:5,marker:4,info:4'" }

    - name: Clone dotfiles repo
      git:
        repo: 'https://github.com/kcierzan/dotfiles'
        dest: "{{ dotfiles_dir }}"
        clone: yes
        update: yes
        version: master

    - name: Determine the list of dotfiles to stow
      set_fact:
        dots_to_stow: "{{ (macos_dotfiles if ansible_os_family == 'Darwin' else linux_dotfiles) + common_dotfiles }}"

    - name: Stow dotfiles
      shell: "stow {{ item }} --target {{ ansible_env.HOME }} --verbose=2"
      args:
        chdir: "{{ dotfiles_dir }}"
      with_items: "{{ dots_to_stow }}"
      register: result
      changed_when: 'result.stderr is search("LINK: ")'

    - name: Installing mise runtimes
      shell: "mise install {{ item }}"
      loop: "{{ mise_runtimes }}"

    - name: Setting global mise runtime versions
      shell: "mise use -g {{ item }}"
      loop: "{{ mise_runtimes }}"

    - name: Sync neovim plugins
      shell: "nvim --headless 'Lazy! sync' +qa"

  handlers:
    - name: reload network manager
      systemd:
        name: NetworkManager
        state: reloaded

